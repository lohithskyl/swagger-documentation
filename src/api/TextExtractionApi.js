/**
 * Skyl.ai API Documentation
 * This is Skyl.ai API documentation.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Body from '../model/Body';
import Body2 from '../model/Body2';

/**
* TextExtraction service.
* @module api/TextExtractionApi
* @version 1.0.0
*/
export default class TextExtractionApi {

    /**
    * Constructs a new TextExtractionApi. 
    * @alias module:api/TextExtractionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiOrganisationsOrgIdProjectsProjectIdDataSetsDatasetIdCollectPost operation.
     * @callback module:api/TextExtractionApi~apiOrganisationsOrgIdProjectsProjectIdDataSetsDatasetIdCollectPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Collects data based upon template and uploads to dataset
     * Collects data based upon template and uploads to dataset
     * @param {module:api/TextExtractionApi~apiOrganisationsOrgIdProjectsProjectIdDataSetsDatasetIdCollectPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiOrganisationsOrgIdProjectsProjectIdDataSetsDatasetIdCollectPost(body, orgId, projectId, datasetId, callback) {
      let postBody = body;

      let pathParams = {
        'org_id': orgId,
        'project_id': projectId,
        'dataset_id': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['project_access_token', 'project_id'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/organisations/{org_id}/projects/{project_id}/data-sets/{dataset_id}/collect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiOrganisationsOrgIdProjectsProjectIdMlModelsMlModelIdInferenceBatchPost operation.
     * @callback module:api/TextExtractionApi~apiOrganisationsOrgIdProjectsProjectIdMlModelsMlModelIdInferenceBatchPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inferences data in batch based upon template.
     * Collects data in batch  based upon template and uploads to dataset
     * @param {module:api/TextExtractionApi~apiOrganisationsOrgIdProjectsProjectIdMlModelsMlModelIdInferenceBatchPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiOrganisationsOrgIdProjectsProjectIdMlModelsMlModelIdInferenceBatchPost(orgId, projectId, mlModelId, callback) {
      let postBody = null;

      let pathParams = {
        'org_id': orgId,
        'project_id': projectId,
        'ml_model_id': mlModelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['project_access_token', 'project_id'];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/organisations/{org_id}/projects/{project_id}/ml-models/{ml_model_id}/inference-batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiOrganisationsOrgIdProjectsProjectIdMlModelsMlModelIdInferencePost operation.
     * @callback module:api/TextExtractionApi~apiOrganisationsOrgIdProjectsProjectIdMlModelsMlModelIdInferencePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inferences data based upon template.
     * Inferences data based upon template.
     * @param {module:api/TextExtractionApi~apiOrganisationsOrgIdProjectsProjectIdMlModelsMlModelIdInferencePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiOrganisationsOrgIdProjectsProjectIdMlModelsMlModelIdInferencePost(body, orgId, projectId, mlModelId, callback) {
      let postBody = body;

      let pathParams = {
        'org_id': orgId,
        'project_id': projectId,
        'ml_model_id': mlModelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['project_access_token', 'project_id'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/organisations/{org_id}/projects/{project_id}/ml-models/{ml_model_id}/inference', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
